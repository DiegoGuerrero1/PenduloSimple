%% Main 
clc
%clear

%% Main 
close all 
freqexp = 0.001;
simuld = VarName17; %varName2 es el voltaje
sdVar = std(VarName17);

VarName1 = transpose(1:length(VarName17));

%Sólamente es un ejemplo, necesitaría proporcionar los datos de la
%simulación númerica

for i = 1:(length(VarName17)/2) %simud son los datos simulados
    simuld(i) = VarName17(i)-100;
end

EXPVSIM(VarName17,simuld,VarName1, freqexp) %VarName1 es el tiempo 
figure
plot(simuld, VarName1)
plot(VarName17, VarName1)



%% Filtrado
% newfiltered = gaussf(VarName17);
% figure;
% plot(newfiltered)
% title('newfilter')

nf = imgaussfilt(VarName17);
figure
plot(VarName17)
hold on
plot(nf);
legend('Con ruido', 'Filtrados')
title('Datos filtrados vs datos con ruido (Gauss)')


%Moving average filter 

g = maf(VarName17, 2);
figure
plot(VarName17)

hold on 
plot(g)
legend('Con ruido', 'Filtrados')
title('Datos filtrados y datos con ruido (MAF)') %Se mueve la gráfica



%% Llamada de datos experimentales y proceso de filtrado
%   Pasos:
%   1. Método de algún filtro 
%   2. Método para llamar los datos y aplicar el filtro 
%

function datafilter = DATAFILTER(datos, stdev,samplfreq)
dt = 1/samplfreq;

g = fspecial("gaussian",[1 dt],stdev);
plot(datos)
title('Datos originales');
g=fspecial('gaussian',[1 dt],stdev);
figure;
plot(g);
title('Gaussiana');
y=conv(datos,g);
figure;
plot(datos,'b');
hold on;
plot(y,'r','linewidth',2);
legend('Señal con ruido','Señal sin ruido');



end
%% Moving - Average Filter 
function movavg = maf(data, winsize)
b = (1/winsize)*ones(1, winsize);
a = 1;

movavg = filter(b,a,data);

end



%% Comparación entre los datos experimentales y los valores obtenidos mediante **simulación**
%   Pasos: 
%   1. Recuperar función benchmark
%   2. Método para graficar datos experimentales vs simulación
%       2.1 Generar método con argumentos: epData, simulData o
%       simulFunction
%       2.2 Llamar función de benchmarck 
%       2.3 Mostrar criterios integrales y estadísticos 





function expvsim = EXPVSIM(expdata,simuldata,time ,samplfreq)
    dt = 1/samplfreq;
    figure
    plot(expdata)
    hold on
    plot(simuldata)
    label('Experimentales','')
    title('Experimentales vs simulación')
    expvsim = benchmark(simuldata,expdata, time,dt);

end
%% filtro 
%Otra alternativa 

function gaussfilter = gaussf(data)
    gausx = zeros(length(data),0);
    for i = 1 : length(data)
        gausx(i) = (1/(sqrt(2*pi)*std(data)))*exp((-data(i)^2)/(2*std(data)^2));
        
    end
    gaussfilter = gausx;
end

% Elena 

function efiltered = efilter(data)
  alpha = 0.3;
    vf = zeros(length(data));
    vi = 0;
    
    for i = 1:length(data)
        vf(i) = (alpha*data(i) + (1 - alpha)*vi);

    end
    efiltered = vf;
end

